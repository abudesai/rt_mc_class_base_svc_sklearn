#! /usr/bin/env python

import os, warnings, sys
import traceback
import argparse

warnings.filterwarnings('ignore') 
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'  # or any {'0', '1', '2'}

import algorithm.utils as utils
import algorithm.model_tuner as model_tuner

# Paths for inputs, model, outputs for ml_vol mounted to the container.
prefix = '/opt/ml_vol/'
data_path = os.path.join(prefix, 'inputs', 'data')
data_schema_path = os.path.join(prefix, 'inputs', 'data_config')
model_path = os.path.join(prefix, 'model', 'artifacts')
hyper_param_path = os.path.join(prefix, 'model', 'model_config')
output_path = os.path.join(prefix, 'outputs')
hpt_results_path = os.path.join(output_path, 'hpt_outputs')
failure_path = os.path.join(output_path, 'errors', 'tune_failure')

channel_name='training'
training_path = os.path.join(data_path, channel_name, "multiClassClassificationBaseMainInput")



def tune(num_trials=50):    
    try:        
        print(f'Running the hyperparameter tuning with # of trials = {num_trials}')  
        # Read data
        train_data = utils.get_data(training_path)
        # read data config
        data_schema = utils.get_data_schema(data_schema_path)
        # run hyper-parameter tuning. This saves results in each trial, so nothing is returned
        model_tuner.tune_hyperparameters(train_data, data_schema, num_trials, 
                                         hyper_param_path, hpt_results_path)
        
        
    except Exception as e:
        print("error!")
        # Write out an error file. This will be returned as the failureReason to the client.
        trc = traceback.format_exc()
        with open(failure_path, 'w') as s:
            s.write('Exception during HPT: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the HPT job logs, as well.
        print('Exception during HPT: ' + str(e) + '\n' + trc, file=sys.stderr)
        # A non-zero exit code causes the HPT job to be marked as Failed.
        sys.exit(255)
    
    
if __name__ == '__main__': 
    parser = argparse.ArgumentParser()
    parser.add_argument("-n", "--num_trials", type=int, default=50, help="the number of trials to run for HPO")
    args = parser.parse_args()
    
    tune(num_trials=args.num_trials)